// Generated by LiveScript 1.5.0
(function(){
  var request, domino, URL, url, domain;
  request = require('request');
  domino = require('domino');
  URL = require('url');
  url = process.argv[2];
  domain = URL.parse(url).host;
  request(url, function(error, response, body){
    var win, nodes, maxkids, i$, len$, node, ref$, grandcounts, commoncount, ref1$, kid, results$ = [];
    if (error) {
      console.error(error);
      process.exit(1);
    }
    win = domino.createWindow(body);
    nodes = win.document.getElementsByTagName('*');
    maxkids = win.document.body;
    for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
      node = nodes[i$];
      if (((ref$ = node.children) != null ? ref$.length : void 8) > maxkids.children.length) {
        maxkids = node;
      }
    }
    grandcounts = {
      0: 0
    };
    commoncount = 0;
    for (i$ = 0, len$ = (ref1$ = maxkids.children).length; i$ < len$; ++i$) {
      kid = ref1$[i$];
      if (!kid.children.length) {
        continue;
      }
      if (!grandcounts[kid.children.length]) {
        grandcounts[kid.children.length] = 0;
      }
      grandcounts[kid.children.length]++;
      if (grandcounts[kid.children.length] > grandcounts[commoncount]) {
        commoncount = kid.children.length;
      }
    }
    for (i$ = 0, len$ = (ref1$ = maxkids.children).length; i$ < len$; ++i$) {
      kid = ref1$[i$];
      if (kid.children.length = commoncount) {
        results$.push(console.log(kid.textContent.split("\n").map(fn$).join(' ')));
      }
    }
    return results$;
    function fn$(it){
      return it.trim();
    }
  });
}).call(this);
