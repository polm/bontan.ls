// Generated by LiveScript 1.4.0
(function(){
  var request, domino, URL, filter, getPrinter, renderAll, renderSummary, scrapeSummary, defaultSummaryScrape, renderTweet, getTwitterOrFacebookMeta, out$ = typeof exports != 'undefined' && exports || this;
  request = require('request');
  domino = require('domino');
  URL = require('url');
  filter = require('prelude-ls').filter;
  out$.getPrinter = getPrinter = function(opts){
    if (opts[0] === '-r') {
      return function(it){
        return console.log(it.innerHTML);
      };
    }
    return function(it){
      return console.log(it.textContent.trim());
    };
  };
  out$.renderAll = renderAll = function(win){
    var nodes, i$, len$, node, results$ = [];
    nodes = win.document.querySelectorAll("H1, H3, P, IMG, LI");
    for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
      node = nodes[i$];
      results$.push(console.log((fn$())));
    }
    return results$;
    function fn$(){
      switch (node.tagName) {
      case 'H1':
        return '# ' + node.textContent + "\n";
      case 'H3':
        return '### ' + node.textContent + "\n";
      case 'IMG':
        return node.src + "\n";
      case 'LI':
        return node.textContent;
      case 'P':
        return node.textContent + "\n";
      default:
        return node.textContent;
      }
    }
  };
  out$.renderSummary = renderSummary = function(win){
    var summary, i$, ref$, len$, key, results$ = [];
    summary = scrapeSummary(win);
    for (i$ = 0, len$ = (ref$ = ['title', 'image', 'description']).length; i$ < len$; ++i$) {
      key = ref$[i$];
      if (summary[key]) {
        results$.push(console.log(summary[key]));
      }
    }
    return results$;
  };
  scrapeSummary = function(win){
    var res;
    res = getTwitterOrFacebookMeta(win);
    if (res) {
      return res;
    }
    return defaultSummaryScrape(win);
  };
  defaultSummaryScrape = function(win){
    var res, nodes, imgs, ps;
    res = {};
    res.title(win.document.title);
    nodes = win.document.querySelectorAll("H1, P, IMG");
    while (nodes[0] && nodes[0].tagName !== 'H1') {
      nodes.shift();
    }
    if (nodes.length === 0) {
      return;
    }
    nodes.shift();
    if (nodes.length === 0) {
      return;
    }
    imgs = nodes.filter(function(it){
      return it.tagName === 'IMG';
    });
    if (imgs.length > 0) {
      res.image = imgs[0].src;
    }
    ps = nodes.filter(function(it){
      return it.tagName === 'P';
    });
    if (ps.length > 0) {
      return res.description = ps[0].textContent;
    }
  };
  out$.renderTweet = renderTweet = function(win){
    var ref$;
    return console.log((ref$ = win.document.querySelector('p.TweetTextSize')) != null ? ref$.textContent : void 8);
  };
  getTwitterOrFacebookMeta = function(win){
    var coreProp, prop, getProp, res;
    coreProp = function(win, p){
      return function(it){
        var ref$;
        return (ref$ = it[0]) != null ? ref$.attributes.content.value : void 8;
      }(
      filter(function(it){
        var ref$, ref1$;
        return ((ref$ = it.attributes.content) != null ? (ref1$ = ref$.value) != null ? ref1$.length : void 8 : void 8) > 0;
      })(
      win.document.querySelectorAll("meta[property=\"" + p + "\"]")));
    };
    prop = function(win, p){
      return coreProp(win, "twitter:" + p) || coreProp(win, "og:" + p);
    };
    getProp = function(it){
      return prop(win, it);
    };
    res = {};
    res.title = getProp('title');
    if (!res.title) {
      return null;
    }
    res.description = getProp('description');
    res.image = getProp('image');
    return res;
  };
}).call(this);
