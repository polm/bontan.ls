// Generated by LiveScript 1.5.0
(function(){
  var request, domino, URL, filter, oembed, iconv, fixEncoding, getPrinter, renderAll, specialSummary, renderSummary, scrapeSummary, metaTagInfo, defaultSummaryScrape, renderTweet, getTwitterOrFacebookMeta, getOembed, out$ = typeof exports != 'undefined' && exports || this;
  request = require('request');
  domino = require('domino');
  URL = require('url');
  filter = require('prelude-ls').filter;
  oembed = require('./oembed');
  iconv = require('iconv').Iconv;
  out$.fixEncoding = fixEncoding = function(res, body){
    var charset, ref$, ref1$, ref2$, ref3$, ref4$;
    charset = (ref$ = res.headers['content-type']) != null ? (ref1$ = ref$.split('charset=')) != null ? (ref2$ = ref1$[1]) != null ? ref2$.toLowerCase() : void 8 : void 8 : void 8;
    if (charset === 'utf-8' || !charset) {
      return body;
    }
    charset = (ref3$ = body.toString().match(/charset=[-_A-z]*/)[0]) != null ? (ref4$ = ref3$.split("=")[1]) != null ? ref4$.toLowerCase() : void 8 : void 8;
    if (!charset || charset === 'utf-8') {
      return body;
    }
    return iconv(charset, 'utf-8//translit//ignore').convert(body).toString();
  };
  out$.getPrinter = getPrinter = function(opts){
    if (opts[0] === '-r') {
      return function(it){
        return console.log(it.innerHTML);
      };
    }
    return function(it){
      return console.log(it.textContent.trim());
    };
  };
  out$.renderAll = renderAll = function(win){
    var nodes, i$, len$, node, results$ = [];
    nodes = win.document.querySelectorAll("H1, H3, P, IMG, LI");
    for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
      node = nodes[i$];
      results$.push(console.log((fn$())));
    }
    return results$;
    function fn$(){
      switch (node.tagName) {
      case 'H1':
        return '# ' + node.textContent + "\n";
      case 'H3':
        return '### ' + node.textContent + "\n";
      case 'IMG':
        return node.src + "\n";
      case 'LI':
        return node.textContent;
      case 'P':
        return node.textContent + "\n";
      default:
        return node.textContent;
      }
    }
  };
  out$.specialSummary = specialSummary = function(domain, url){
    var pagename, ref$, apiUrl;
    if (domain === 'en.wikipedia.org') {
      pagename = (ref$ = url.split('/'))[ref$.length - 1];
      apiUrl = "https://en.wikipedia.org/w/api.php?" + "format=json&action=query&prop=extracts&" + "titles=" + pagename;
      return request(apiUrl, function(error, response, body){
        var data, key, results$ = [];
        if (error) {
          console.error(error);
          process.exit(1);
        }
        data = JSON.parse(body).query.pages;
        for (key in pages) {
          results$.push(console.log(jk));
        }
        return results$;
      });
    }
  };
  out$.renderSummary = renderSummary = function(win, domain){
    /*
    for key in <[ title image description ]>
      if summary[key]
        console.log summary[key]
    */
    domain == null && (domain = null);
    return scrapeSummary(win, domain, function(summary){
      var out;
      if (summary.html) {
        console.log(summary.html);
        return;
      }
      out = "<div class=\"summary\">";
      if (summary.image) {
        out += "<div class=\"imgwrapper\"  style=\"background: url(" + summary.image + ")\"></div>";
      }
      out += "<h2><a href=\"" + win.url + "\">" + summary.title + "</a></h2>";
      out += "<p>" + summary.description + "</p>";
      out += "</div>";
      return console.log(out);
    });
  };
  scrapeSummary = function(win, domain, cb){
    return oembed.extractHtml(win, cb, function(){
      return getTwitterOrFacebookMeta(win, cb, function(){
        return defaultSummaryScrape(win, cb);
      });
    });
  };
  metaTagInfo = function(win, cb){
    var ref$, ref1$;
    return cb({
      title: ((ref$ = win.document.querySelector("title")) != null ? ref$.text : void 8) || "Untitled",
      description: ((ref1$ = win.document.querySelector("meta[name=\"description\"]")) != null ? ref1$.text : void 8) || "Untitled"
    });
  };
  defaultSummaryScrape = function(win, cb){
    var res, nodes, imgs, ps;
    res = {};
    res.title = win.document.title;
    nodes = win.document.querySelectorAll("H1, P, IMG");
    while (nodes[0] && nodes[0].tagName !== 'H1') {
      nodes.shift();
    }
    if (nodes.length === 0) {
      return;
    }
    nodes.shift();
    if (nodes.length === 0) {
      return;
    }
    imgs = nodes.filter(function(it){
      return it.tagName === 'IMG';
    });
    if (imgs.length > 0) {
      res.image = imgs[0].src;
    }
    ps = nodes.filter(function(it){
      return it.tagName === 'P';
    });
    if (ps.length > 0) {
      res.description = ps[0].textContent;
    }
    return cb(res);
  };
  out$.renderTweet = renderTweet = function(win){
    var ref$;
    return console.log((ref$ = win.document.querySelector('p.TweetTextSize')) != null ? ref$.textContent : void 8);
  };
  getTwitterOrFacebookMeta = function(win, cb, fail){
    var coreProp, metaSelects, prop, getProp, res;
    coreProp = function(win, sel){
      return function(it){
        var ref$;
        return (ref$ = it[0]) != null ? ref$.attributes.content.value : void 8;
      }(
      filter(function(it){
        var ref$, ref1$;
        return ((ref$ = it.attributes.content) != null ? (ref1$ = ref$.value) != null ? ref1$.length : void 8 : void 8) > 0;
      })(
      win.document.querySelectorAll(sel)));
    };
    metaSelects = {
      title: 'title',
      description: 'meta[name="description"]',
      image: 'meta[name="image"]'
    };
    prop = function(win, p){
      return coreProp(win, "meta[property=\"twitter:" + p + "\"]") || coreProp(win, "meta[property=\"og:" + p + "\"]") || coreProp(win, metaSelects[p]);
    };
    getProp = function(it){
      return prop(win, it);
    };
    res = {};
    res.title = getProp('title');
    if (!res.title) {
      return fail();
    }
    res.description = getProp('description');
    res.image = getProp('image');
    return cb(res);
  };
  getOembed = function(win){
    var oembedUrl, ref$;
    oembedUrl = (ref$ = win.document.querySelector("link[type=\"application/json+oembed\"]")) != null ? ref$.attributes.href : void 8;
    return request(oembedUrl, function(error, response, body){
      var data, output;
      data = JSON.parse(body);
      return output = (function(){
        switch (data.type) {
        case 'rich':
        case 'video':
          return data.html;
        case 'photo':
          return "<div class=\"imgwrapper\" style=\"background: url(" + data.url + ")\" ></div>";
        case 'link':
          break;
        default:
          throw "Unknown oembed type";
        }
      }());
    });
  };
}).call(this);
